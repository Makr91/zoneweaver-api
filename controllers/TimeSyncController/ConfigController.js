/**
 * @fileoverview Time Sync Configuration Controller
 * @description Handles time sync configuration using task queue and existing utilities
 * @author Mark Gilbert
 * @license: https://zoneweaver-api.startcloud.com/license/
 */

import { TaskPriority } from '../../models/TaskModel.js';
import {
  createSystemTask,
  taskCreatedResponse,
  errorResponse,
} from '../SystemHostController/utils/ResponseHelpers.js';
import { detectTimeService } from './utils/TimeServiceDetection.js';
import fs from 'fs';
import { log } from '../../lib/Logger.js';

/**
 * Generate default NTP configuration
 * @returns {string} Default NTP configuration content
 */
const generateDefaultNtpConfig = () => `# Generated by Zoneweaver API
# Default NTP configuration for OmniOS

driftfile /var/ntp/ntp.drift

# Access restrictions
restrict default ignore
restrict -6 default ignore
restrict 127.0.0.1
restrict -6 ::1

# Default NTP servers (configure as needed)
server 0.pool.ntp.org iburst
server 1.pool.ntp.org iburst  
server 2.pool.ntp.org iburst
server 3.pool.ntp.org iburst

# Allow updates from configured servers
restrict 0.pool.ntp.org nomodify noquery notrap
restrict 1.pool.ntp.org nomodify noquery notrap
restrict 2.pool.ntp.org nomodify noquery notrap
restrict 3.pool.ntp.org nomodify noquery notrap
`;

/**
 * Generate default Chrony configuration
 * @returns {string} Default Chrony configuration content
 */
const generateDefaultChronyConfig =
  () => `# Generated by Zoneweaver API - OmniOS Chrony Configuration

pool 0.omnios.pool.ntp.org iburst

driftfile /var/lib/chrony/drift
ntsdumpdir /var/lib/chrony
pidfile /var/run/chrony/chronyd.pid

makestep 1.0 3

logdir /var/log/chrony
log measurements statistics tracking
`;

/**
 * @swagger
 * /system/time-sync/config:
 *   get:
 *     summary: Get time sync configuration
 *     description: Returns current time sync configuration and suggested defaults
 *     tags: [Time Synchronization]
 *     security:
 *       - ApiKeyAuth: []
 *     responses:
 *       200:
 *         description: Configuration retrieved successfully
 *       500:
 *         description: Failed to get configuration
 */
export const getTimeSyncConfig = async (req, res) => {
  try {
    // Detect available service using ServiceManager utilities
    const serviceInfo = await detectTimeService();

    if (!serviceInfo.available) {
      return errorResponse(res, 404, 'No time synchronization service available', {
        service: serviceInfo.service,
        details: serviceInfo.details,
      });
    }

    let configFile = '';
    let currentConfig = '';
    let configExists = false;
    let suggestedDefaults = {};

    if (serviceInfo.service === 'ntp') {
      configFile = '/etc/inet/ntp.conf';
      suggestedDefaults = {
        servers: ['0.pool.ntp.org', '1.pool.ntp.org', '2.pool.ntp.org', '3.pool.ntp.org'],
        config_template: generateDefaultNtpConfig(),
      };
    } else if (serviceInfo.service === 'chrony') {
      configFile = '/etc/inet/chrony.conf';
      suggestedDefaults = {
        servers: ['0.omnios.pool.ntp.org'],
        config_template: generateDefaultChronyConfig(),
      };
    }

    // Read existing config if it exists
    try {
      if (fs.existsSync(configFile)) {
        currentConfig = fs.readFileSync(configFile, 'utf8');
        configExists = true;
      }
    } catch (error) {
      log.filesystem.warn('Failed to read time sync config file', {
        config_file: configFile,
        error: error.message,
      });
    }

    return res.json({
      service: serviceInfo.service,
      config_file: configFile,
      config_exists: configExists,
      current_config: currentConfig,
      suggested_defaults: suggestedDefaults,
      service_details: serviceInfo.details,
    });
  } catch (error) {
    log.api.error('Error getting time sync config', {
      error: error.message,
      stack: error.stack,
    });
    return errorResponse(res, 500, 'Failed to get time sync configuration', error.message);
  }
};

/**
 * @swagger
 * /system/time-sync/config:
 *   put:
 *     summary: Update time sync configuration
 *     description: Updates the time sync configuration file and restarts the service
 *     tags: [Time Synchronization]
 *     security:
 *       - ApiKeyAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               config_content:
 *                 type: string
 *                 description: Complete configuration file content
 *               backup_existing:
 *                 type: boolean
 *                 default: true
 *                 description: Create backup of existing config
 *               restart_service:
 *                 type: boolean
 *                 default: true
 *                 description: Restart service after config update
 *               created_by:
 *                 type: string
 *                 default: "api"
 *     responses:
 *       202:
 *         description: Configuration update task created
 *       404:
 *         description: No time sync service available
 *       400:
 *         description: Invalid configuration content
 */
export const updateTimeSyncConfig = async (req, res) => {
  try {
    const {
      config_content,
      backup_existing = true,
      restart_service = true,
      created_by = 'api',
    } = req.body;

    if (!config_content || typeof config_content !== 'string') {
      return errorResponse(res, 400, 'config_content is required and must be a string');
    }

    // Detect available service using ServiceManager utilities
    const serviceInfo = await detectTimeService();

    if (!serviceInfo.available) {
      return errorResponse(res, 404, 'No time synchronization service available', {
        service: serviceInfo.service,
        details: serviceInfo.details,
      });
    }

    // Create task using ResponseHelpers and delegate to existing TimeManager
    const task = await createSystemTask(
      'update_time_sync_config',
      {
        service: serviceInfo.service,
        config_content,
        backup_existing,
        restart_service,
      },
      created_by,
      TaskPriority.HIGH
    );

    return taskCreatedResponse(
      res,
      `Time sync configuration update task created for ${serviceInfo.service}`,
      task,
      {
        service: serviceInfo.service,
      }
    );
  } catch (error) {
    log.api.error('Error creating time sync config update task', {
      error: error.message,
      stack: error.stack,
    });
    return errorResponse(res, 500, 'Failed to create time sync config update task', error.message);
  }
};
